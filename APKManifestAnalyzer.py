import os
import sys
import subprocess
import xml.etree.ElementTree as ET
from datetime import datetime
from pathlib import Path
import shutil
import webbrowser

# Configuration
APKTOOL_PATH = "apktool"  # Make sure apktool is in your PATH or provide full path
OUTPUT_DIR = "apk_analysis_reports"
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>APK Manifest Analysis Report</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
        }}
        h1, h2, h3 {{
            color: #2c3e50;
        }}
        h1 {{
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }}
        h2 {{
            margin-top: 30px;
            border-bottom: 1px solid #eee;
            padding-bottom: 5px;
        }}
        .component {{
            background: #f9f9f9;
            border-left: 4px solid #3498db;
            padding: 10px 15px;
            margin: 10px 0;
            border-radius: 0 4px 4px 0;
        }}
        .component-name {{
            font-weight: bold;
            color: #2980b9;
        }}
        .property {{
            margin: 5px 0;
        }}
        .property-name {{
            font-weight: bold;
        }}
        .danger {{
            color: #e74c3c;
        }}
        .warning {{
            color: #f39c12;
        }}
        .info {{
            color: #3498db;
        }}
        .summary {{
            background: #f0f8ff;
            padding: 15px;
            border-radius: 4px;
            margin: 20px 0;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }}
        th, td {{
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }}
        th {{
            background-color: #3498db;
            color: white;
        }}
        tr:nth-child(even) {{
            background-color: #f2f2f2;
        }}
        .footer {{
            margin-top: 30px;
            text-align: center;
            font-size: 0.9em;
            color: #7f8c8d;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>APK Manifest Analysis Report</h1>
        
        <div class="summary">
            <h2>Summary</h2>
            <p><span class="property-name">APK File:</span> {apk_name}</p>
            <p><span class="property-name">Package Name:</span> {package_name}</p>
            <p><span class="property-name">Version:</span> {version_name} (Code: {version_code})</p>
            <p><span class="property-name">Target SDK:</span> {target_sdk}</p>
            <p><span class="property-name">Min SDK:</span> {min_sdk}</p>
            <p><span class="property-name">Report Generated:</span> {timestamp}</p>
        </div>
        
        <h2>Exported Activities ({activity_count})</h2>
        {activities_section}
        
        <h2>Exported Services ({service_count})</h2>
        {services_section}
        
        <h2>Exported Broadcast Receivers ({receiver_count})</h2>
        {receivers_section}
        
        <h2>Exported Content Providers ({provider_count})</h2>
        {providers_section}
        
        <h2>Permissions</h2>
        {permissions_section}
        
        <h2>Security Analysis</h2>
        {security_analysis}
        
        <div class="footer">
            <p>Report generated by APK Manifest Analyzer</p>
        </div>
    </div>
</body>
</html>
"""

def run_apktool(apk_path, output_dir):
    """Decompile APK using apktool"""
    try:
        cmd = [APKTOOL_PATH, "d", apk_path, "-o", output_dir, "-f"]
        subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return True
    except subprocess.CalledProcessError as e:
        print(f"Error decompiling APK: {e}")
        return False
    except FileNotFoundError:
        print("apktool not found. Please install apktool and ensure it's in your PATH.")
        return False

def parse_manifest(manifest_path):
    """Parse AndroidManifest.xml and extract components"""
    try:
        tree = ET.parse(manifest_path)
        root = tree.getroot()
        
        # Register namespaces
        ns = {'android': 'http://schemas.android.com/apk/res/android'}
        
        # Basic info
        manifest = root
        package_name = manifest.get('package')
        version_code = manifest.get('{http://schemas.android.com/apk/res/android}versionCode')
        version_name = manifest.get('{http://schemas.android.com/apk/res/android}versionName')
        
        # SDK versions
        uses_sdk = manifest.find('uses-sdk')
        min_sdk = uses_sdk.get('{http://schemas.android.com/apk/res/android}minSdkVersion') if uses_sdk is not None else "Not specified"
        target_sdk = uses_sdk.get('{http://schemas.android.com/apk/res/android}targetSdkVersion') if uses_sdk is not None else "Not specified"
        
        # Components
        components = {
            'activities': [],
            'services': [],
            'receivers': [],
            'providers': [],
            'permissions': []
        }
        
        # Activities
        for activity in manifest.findall('application/activity', ns):
            activity_name = activity.get('{http://schemas.android.com/apk/res/android}name')
            exported = activity.get('{http://schemas.android.com/apk/res/android}exported', 'false')
            permission = activity.get('{http://schemas.android.com/apk/res/android}permission')
            intent_filters = []
            
            for intent_filter in activity.findall('intent-filter', ns):
                actions = [action.get('{http://schemas.android.com/apk/res/android}name') 
                          for action in intent_filter.findall('action', ns)]
                categories = [category.get('{http://schemas.android.com/apk/res/android}name') 
                             for category in intent_filter.findall('category', ns)]
                data = [data_elem.get('{http://schemas.android.com/apk/res/android}scheme') 
                       for data_elem in intent_filter.findall('data', ns)]
                intent_filters.append({
                    'actions': actions,
                    'categories': categories,
                    'data': data
                })
            
            components['activities'].append({
                'name': activity_name,
                'exported': exported,
                'permission': permission,
                'intent_filters': intent_filters
            })
        
        # Services
        for service in manifest.findall('application/service', ns):
            service_name = service.get('{http://schemas.android.com/apk/res/android}name')
            exported = service.get('{http://schemas.android.com/apk/res/android}exported', 'false')
            permission = service.get('{http://schemas.android.com/apk/res/android}permission')
            
            components['services'].append({
                'name': service_name,
                'exported': exported,
                'permission': permission
            })
        
        # Broadcast Receivers
        for receiver in manifest.findall('application/receiver', ns):
            receiver_name = receiver.get('{http://schemas.android.com/apk/res/android}name')
            exported = receiver.get('{http://schemas.android.com/apk/res/android}exported', 'false')
            permission = receiver.get('{http://schemas.android.com/apk/res/android}permission')
            
            components['receivers'].append({
                'name': receiver_name,
                'exported': exported,
                'permission': permission
            })
        
        # Content Providers
        for provider in manifest.findall('application/provider', ns):
            provider_name = provider.get('{http://schemas.android.com/apk/res/android}name')
            exported = provider.get('{http://schemas.android.com/apk/res/android}exported', 'false')
            permission = provider.get('{http://schemas.android.com/apk/res/android}permission')
            read_permission = provider.get('{http://schemas.android.com/apk/res/android}readPermission')
            write_permission = provider.get('{http://schemas.android.com/apk/res/android}writePermission')
            
            components['providers'].append({
                'name': provider_name,
                'exported': exported,
                'permission': permission,
                'read_permission': read_permission,
                'write_permission': write_permission
            })
        
        # Permissions
        for permission in manifest.findall('uses-permission', ns):
            perm_name = permission.get('{http://schemas.android.com/apk/res/android}name')
            components['permissions'].append(perm_name)
        
        return {
            'package_name': package_name,
            'version_code': version_code,
            'version_name': version_name,
            'min_sdk': min_sdk,
            'target_sdk': target_sdk,
            'components': components
        }
    
    except ET.ParseError as e:
        print(f"Error parsing manifest: {e}")
        return None

def generate_component_html(component, component_type):
    """Generate HTML for a single component"""
    html = f'<div class="component">\n'
    html += f'<div class="component-name">{component["name"]}</div>\n'
    
    if component_type == 'activity':
        html += f'<div class="property"><span class="property-name">Exported:</span> {component["exported"]}</div>\n'
        if component["permission"]:
            html += f'<div class="property"><span class="property-name">Required Permission:</span> {component["permission"]}</div>\n'
        
        if component["intent_filters"]:
            html += '<div class="property"><span class="property-name">Intent Filters:</span></div>\n'
            for i, intent_filter in enumerate(component["intent_filters"], 1):
                html += f'<div style="margin-left: 20px;">\n'
                html += f'<div class="property"><span class="property-name">Filter {i}:</span></div>\n'
                if intent_filter["actions"]:
                    html += f'<div class="property" style="margin-left: 20px;"><span class="property-name">Actions:</span> {", ".join(intent_filter["actions"])}</div>\n'
                if intent_filter["categories"]:
                    html += f'<div class="property" style="margin-left: 20px;"><span class="property-name">Categories:</span> {", ".join(intent_filter["categories"])}</div>\n'
                if intent_filter["data"] and any(intent_filter["data"]):
                    html += f'<div class="property" style="margin-left: 20px;"><span class="property-name">Data Schemes:</span> {", ".join(filter(None, intent_filter["data"]))}</div>\n'
                html += '</div>\n'
    
    elif component_type in ['service', 'receiver']:
        html += f'<div class="property"><span class="property-name">Exported:</span> {component["exported"]}</div>\n'
        if component["permission"]:
            html += f'<div class="property"><span class="property-name">Required Permission:</span> {component["permission"]}</div>\n'
    
    elif component_type == 'provider':
        html += f'<div class="property"><span class="property-name">Exported:</span> {component["exported"]}</div>\n'
        if component["permission"]:
            html += f'<div class="property"><span class="property-name">Required Permission:</span> {component["permission"]}</div>\n'
        if component["read_permission"]:
            html += f'<div class="property"><span class="property-name">Read Permission:</span> {component["read_permission"]}</div>\n'
        if component["write_permission"]:
            html += f'<div class="property"><span class="property-name">Write Permission:</span> {component["write_permission"]}</div>\n'
    
    html += '</div>\n'
    return html

def generate_security_analysis(components):
    """Generate security analysis section"""
    html = '<div class="summary">\n'
    html += '<h3>Security Findings</h3>\n'
    
    # Check for exported components without permission protection
    vulnerable_components = []
    
    for activity in components['activities']:
        if activity['exported'] == 'true' and not activity['permission']:
            vulnerable_components.append(('Activity', activity['name']))
    
    for service in components['services']:
        if service['exported'] == 'true' and not service['permission']:
            vulnerable_components.append(('Service', service['name']))
    
    for receiver in components['receivers']:
        if receiver['exported'] == 'true' and not receiver['permission']:
            vulnerable_components.append(('Broadcast Receiver', receiver['name']))
    
    for provider in components['providers']:
        if provider['exported'] == 'true' and not provider['permission']:
            vulnerable_components.append(('Content Provider', provider['name']))
    
    if vulnerable_components:
        html += '<div class="danger">\n'
        html += '<p><strong>⚠️ Security Warning:</strong> The following components are exported and not protected by permissions:</p>\n'
        html += '<ul>\n'
        for comp_type, name in vulnerable_components:
            html += f'<li><strong>{comp_type}:</strong> {name}</li>\n'
        html += '</ul>\n'
        html += '<p>Exported components without proper permission protection can be accessed by other apps, potentially leading to security vulnerabilities.</p>\n'
        html += '</div>\n'
    else:
        html += '<div class="info">\n'
        html += '<p>✅ No exported components found without permission protection.</p>\n'
        html += '</div>\n'
    
    # Check for dangerous permissions
    dangerous_perms = [
        'android.permission.READ_CONTACTS',
        'android.permission.WRITE_CONTACTS',
        'android.permission.READ_CALENDAR',
        'android.permission.WRITE_CALENDAR',
        'android.permission.ACCESS_FINE_LOCATION',
        'android.permission.ACCESS_COARSE_LOCATION',
        'android.permission.CAMERA',
        'android.permission.READ_EXTERNAL_STORAGE',
        'android.permission.WRITE_EXTERNAL_STORAGE',
        'android.permission.RECORD_AUDIO',
        'android.permission.READ_SMS',
        'android.permission.SEND_SMS',
        'android.permission.RECEIVE_SMS',
        'android.permission.READ_PHONE_STATE',
        'android.permission.CALL_PHONE',
        'android.permission.READ_CALL_LOG',
        'android.permission.WRITE_CALL_LOG',
        'android.permission.ADD_VOICEMAIL',
        'android.permission.USE_SIP',
        'android.permission.PROCESS_OUTGOING_CALLS',
        'android.permission.BODY_SENSORS',
        'android.permission.READ_CELL_BROADCASTS'
    ]
    
    found_dangerous_perms = [perm for perm in components['permissions'] if perm in dangerous_perms]
    
    if found_dangerous_perms:
        html += '<div class="warning">\n'
        html += '<p><strong>⚠️ Dangerous Permissions Requested:</strong></p>\n'
        html += '<ul>\n'
        for perm in found_dangerous_perms:
            html += f'<li>{perm}</li>\n'
        html += '</ul>\n'
        html += '<p>These permissions give access to sensitive user data. Ensure they are properly justified in the app\'s functionality.</p>\n'
        html += '</div>\n'
    else:
        html += '<div class="info">\n'
        html += '<p>✅ No dangerous permissions requested.</p>\n'
        html += '</div>\n'
    
    html += '</div>\n'
    return html

def generate_html_report(apk_path, manifest_data):
    """Generate the complete HTML report"""
    # Prepare sections
    activities_html = '\n'.join([generate_component_html(activity, 'activity') 
                               for activity in manifest_data['components']['activities'] 
                               if activity['exported'] == 'true'])
    
    services_html = '\n'.join([generate_component_html(service, 'service') 
                             for service in manifest_data['components']['services'] 
                             if service['exported'] == 'true'])
    
    receivers_html = '\n'.join([generate_component_html(receiver, 'receiver') 
                              for receiver in manifest_data['components']['receivers'] 
                              if receiver['exported'] == 'true'])
    
    providers_html = '\n'.join([generate_component_html(provider, 'provider') 
                              for provider in manifest_data['components']['providers'] 
                              if provider['exported'] == 'true'])
    
    permissions_html = '<ul>\n' + '\n'.join([f'<li>{perm}</li>' for perm in manifest_data['components']['permissions']]) + '\n</ul>'
    
    security_analysis_html = generate_security_analysis(manifest_data['components'])
    
    # Counts
    activity_count = len([a for a in manifest_data['components']['activities'] if a['exported'] == 'true'])
    service_count = len([s for s in manifest_data['components']['services'] if s['exported'] == 'true'])
    receiver_count = len([r for r in manifest_data['components']['receivers'] if r['exported'] == 'true'])
    provider_count = len([p for p in manifest_data['components']['providers'] if p['exported'] == 'true'])
    
    # Fill template
    html = HTML_TEMPLATE.format(
        apk_name=os.path.basename(apk_path),
        package_name=manifest_data['package_name'],
        version_code=manifest_data['version_code'],
        version_name=manifest_data['version_name'] if manifest_data['version_name'] else "Not specified",
        min_sdk=manifest_data['min_sdk'],
        target_sdk=manifest_data['target_sdk'],
        timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        activities_section=activities_html if activities_html else "<p>No exported activities found.</p>",
        services_section=services_html if services_html else "<p>No exported services found.</p>",
        receivers_section=receivers_html if receivers_html else "<p>No exported broadcast receivers found.</p>",
        providers_section=providers_html if providers_html else "<p>No exported content providers found.</p>",
        permissions_section=permissions_html,
        security_analysis=security_analysis_html,
        activity_count=activity_count,
        service_count=service_count,
        receiver_count=receiver_count,
        provider_count=provider_count
    )
    
    return html

def save_report(html_content, apk_path, output_dir):
    """Save the HTML report to a file"""
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    apk_name = os.path.splitext(os.path.basename(apk_path))[0]
    report_path = os.path.join(output_dir, f"{apk_name}_manifest_analysis.html")
    
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    return report_path

def main():
    if len(sys.argv) != 2:
        print("Usage: python apk_analyzer.py <path_to_apk>")
        sys.exit(1)
    
    apk_path = sys.argv[1]
    if not os.path.isfile(apk_path):
        print(f"Error: File not found - {apk_path}")
        sys.exit(1)
    
    print(f"Analyzing APK: {apk_path}")
    
    # Create temp directory for decompilation
    temp_dir = "temp_decompile"
    if os.path.exists(temp_dir):
        print(f"Cleaning up existing temp directory: {temp_dir}")
        shutil.rmtree(temp_dir)
    
    # Step 1: Decompile APK
    print("Decompiling APK...")
    if not run_apktool(apk_path, temp_dir):
        sys.exit(1)
    
    # Step 2: Parse AndroidManifest.xml
    manifest_path = os.path.join(temp_dir, "AndroidManifest.xml")
    if not os.path.isfile(manifest_path):
        print(f"Error: AndroidManifest.xml not found in decompiled output")
        sys.exit(1)
    
    print("Parsing AndroidManifest.xml...")
    manifest_data = parse_manifest(manifest_path)
    if not manifest_data:
        sys.exit(1)
    
    # Step 3: Generate HTML report
    print("Generating HTML report...")
    html_content = generate_html_report(apk_path, manifest_data)
    
    # Step 4: Save report
    report_path = save_report(html_content, apk_path, OUTPUT_DIR)
    print(f"Report generated successfully: {report_path}")
    
    # Clean up
    shutil.rmtree(temp_dir)
    
    # Open report in default browser
    webbrowser.open(f"file://{os.path.abspath(report_path)}")

if __name__ == "__main__":
    main()